# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-07-07 09:05
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='-', verbose_name='Name of this access type')),
                ('ISBN', models.TextField(blank=True, verbose_name='ISBN of collection')),
                ('ISLRN', models.TextField(blank=True, verbose_name='ISLRN of collection')),
            ],
        ),
        migrations.CreateModel(
            name='AccessAvailability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'academic'), ('4', 'other'), ('1', 'public'), ('3', 'restricted')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-5439_98bb103d-476a-7f62-54b4-bf9de24d2229'>Access: type of license</a>", max_length=5, verbose_name='Domain')),
            ],
        ),
        migrations.CreateModel(
            name='AccessContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2978_0e9e4864-44c4-de22-66b1-9b38bca10836'>Person</a>", verbose_name='Access: person to contact')),
                ('address', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2505_b61e249b-ac68-b40a-0f21-03a4a26e16b4'>Address</a>", verbose_name='Access: address of contact')),
                ('email', models.EmailField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2521_7b01b455-0de8-d753-ad4e-dee49953ae98'>Email</a>", max_length=254, verbose_name='Access: email of contact')),
            ],
        ),
        migrations.CreateModel(
            name='AccessMedium',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(choices=[('2', 'CDROM'), ('3', 'DVD'), ('4', 'blueray'), ('5', 'hard disk'), ('1', 'internet'), ('8', 'other'), ('6', 'paper copy'), ('7', 'video')], default='0', help_text='Sorry, no help available for access.medium.format', max_length=5, verbose_name='Resource medium')),
            ],
        ),
        migrations.CreateModel(
            name='AccessWebsite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.URLField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2546_180dca37-c1d8-dffe-5d46-8f16de143320'>Web reference</a>", verbose_name='Website to access the collection')),
            ],
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('1', 'No Linguistic Annotation'), ('25', 'PosTagging'), ('2', 'alignment'), ('3', 'audienceReactions'), ('4', 'bodyMovements'), ('5', 'certaintyLevel'), ('6', 'coreference'), ('7', 'dialogueActs'), ('8', 'discourseAnnotation'), ('9', 'discourseRelations'), ('10', 'events'), ('11', 'facialExpressions'), ('12', 'gazeEyeMovements'), ('13', 'glosses'), ('14', 'handArmGestures'), ('15', 'handManipulationOfObjects'), ('16', 'headMovements'), ('17', 'lemmatization'), ('18', 'links'), ('19', 'lipMovements'), ('20', 'namedEntities'), ('21', 'orthographicTranscription'), ('52', 'other'), ('22', 'paralanguageAnnotation'), ('23', 'phoneticTranscription'), ('24', 'polarity'), ('26', 'prompts'), ('27', 'prosodicAnnotation'), ('28', 'questionTopicalTarget'), ('29', 'segmentation'), ('30', 'semanticAnnotation'), ('31', 'semanticClasses'), ('32', 'semanticRelations'), ('33', 'semanticRoles'), ('34', 'sentiment'), ('35', 'sentityMentions'), ('36', 'shallowParsing'), ('37', 'soundEvents'), ('38', 'soundToTextAlignment'), ('39', 'speakerIdentification'), ('40', 'speakerTurns'), ('41', 'speechActs'), ('42', 'speechAnnotation'), ('43', 'stemming'), ('44', 'structuralAnnotation'), ('45', 'subcategorizationFrames'), ('53', 'syntacticAnnotation'), ('46', 'temporalExpressions'), ('47', 'textualEntailment'), ('48', 'translation'), ('49', 'transliteration'), ('50', 'treebanks'), ('51', 'wordSenses')], default='0', max_length=5, verbose_name='Kind of annotation')),
                ('mode', models.CharField(choices=[('1', 'automatic'), ('4', 'interactive'), ('2', 'manual'), ('3', 'mixed'), ('5', 'other'), ('6', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2506_48f68696-57f3-74da-38e8-aa0f8e6ecc2f'>Annotation mode</a>", max_length=5, verbose_name='Annotation mode')),
                ('format', models.CharField(choices=[('33', 'AIF'), ('34', 'BAS'), ('35', 'MT'), ('36', 'TRS'), ('1', 'application/json'), ('2', 'application/pdf'), ('37', 'other'), ('3', 'text/html'), ('4', 'text/plain'), ('5', 'text/plain-bas'), ('6', 'text/praat-textgrid'), ('21', 'text/x-cgn-bpt+xml'), ('22', 'text/x-cgn-lxk+xml'), ('23', 'text/x-cgn-pri+xml'), ('24', 'text/x-cgn-prx+xml'), ('25', 'text/x-cgn-skp+xml'), ('26', 'text/x-cgn-tag+xml'), ('27', 'text/x-cgn-tig+xml'), ('8', 'text/x-chat'), ('9', 'text/x-cut'), ('10', 'text/x-eaf+xml'), ('11', 'text/x-esf'), ('29', 'text/x-jasmin-awd+text'), ('31', 'text/x-jasmin-hmi+text'), ('28', 'text/x-jasmin-ort+text'), ('30', 'text/x-jasmin-pos+text'), ('12', 'text/x-lexus-config+xml'), ('13', 'text/x-lexus-resource+xml'), ('14', 'text/x-lmf+xml'), ('32', 'text/x-mmax+xml'), ('15', 'text/x-shoebox-language'), ('18', 'text/x-shoebox-lexicon'), ('16', 'text/x-shoebox-text'), ('17', 'text/x-shoebox-type'), ('20', 'text/x-toolbox-lexicon'), ('19', 'text/x-toolbox-text'), ('7', 'text/xml')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2562_872eb94a-47fb-b551-2f64-13ded063259e'>Format of this annotation layer</a>", max_length=5, verbose_name='Annotation format')),
            ],
        ),
        migrations.CreateModel(
            name='Audience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('4', 'large'), ('3', 'medium'), ('1', 'no'), ('5', 'other'), ('2', 'small'), ('6', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-6266_8a69d58b-e6a0-cf4e-934d-cbb1ac4417ac'>Audience type</a>", max_length=5, verbose_name='Audience')),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('3', 'broadcasting'), ('2', 'experimental-setting'), ('1', 'face-to-face'), ('6', 'human-machine-dialogue'), ('7', 'other'), ('4', 'telephone'), ('8', 'unknown'), ('5', 'wizard-of-ozz')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2464_be58b081-dad1-85f8-d20d-0445078f4ac0'>Channel</a>", max_length=5, verbose_name='Channel for the speech corpus')),
            ],
        ),
        migrations.CreateModel(
            name='CharacterEncoding',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'ANSII'), ('1', 'ASCII'), ('3', 'ISO-8859'), ('4', 'UTF7'), ('5', 'UTF8'), ('6', 'other'), ('7', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2564_880b1108-6b03-647f-eed9-cdfbd464c661'>Name of the character encoding</a>", max_length=5, verbose_name='Character encoding')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Sorry, no help available for provenance.geographic.place', max_length=80, verbose_name='Place (city)')),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='-', max_length=10, verbose_name='Unique short collection identifier (10 characters max)')),
                ('description', models.TextField(blank=True, help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2520_9eeedfb4-47d3-ddee-cfcb-99ac634bf1db'>Description of the collection</a>", verbose_name='Describes the collection as a whole')),
                ('clarinCentre', models.TextField(blank=True, help_text='Clarin centre (Name of the clarin centre)', verbose_name='Clarin centre in charge')),
                ('version', models.TextField(blank=True, help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2547_7883d382-b3ce-8ab4-7052-0138525a8ba1'>Version information</a>", verbose_name='Version of the collection')),
                ('access', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.Access')),
            ],
        ),
        migrations.CreateModel(
            name='ConversationalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'dialogue'), ('1', 'monologue'), ('3', 'multilogue'), ('4', 'not-a-natural-format'), ('5', 'other'), ('6', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2469_2160b7a0-80f7-2d68-5f3e-997e052a1602'>Type of conversation (event structure)</a>", max_length=5, verbose_name='Type of conversation')),
            ],
        ),
        migrations.CreateModel(
            name='Documentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentationFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-5435_155a7fae-a941-e6a8-4b63-4f6d1bd0c2aa'>Documentation: File</a>", verbose_name='File name for documentation')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format', models.CharField(choices=[('1', 'manual'), ('5', 'none'), ('4', 'other'), ('2', 'readme file'), ('3', 'website')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-5434_9c284553-b24c-d3ea-f3e8-5bebf0ee5f44'>Documentation: type</a>", max_length=5, verbose_name='RKind of documentation')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentationUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.URLField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2546_180dca37-c1d8-dffe-5d46-8f16de143320'>Documentation: URL</a>", verbose_name='URL of documentation')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='DomainDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2467_f4e7331f-b930-fc42-eeea-05e383cfaa78'>Domain</a>", verbose_name='Domain')),
            ],
        ),
        migrations.CreateModel(
            name='FieldChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=50)),
                ('english_name', models.CharField(max_length=50)),
                ('dutch_name', models.CharField(max_length=50)),
                ('machine_value', models.IntegerField(help_text='The actual numeric value stored in the database. Created automatically.')),
            ],
            options={
                'ordering': ['field', 'machine_value'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'conversation'), ('4', 'interviews'), ('19', 'lectures'), ('7', 'newspaper-article'), ('17', 'other'), ('11', 'prompted speech'), ('12', 'radio/TV-broadcast'), ('15', 'speeches'), ('18', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2470_d191f2b2-6339-f031-b534-70d526b28357'>Genre of the collection as a whole</a>", max_length=5, verbose_name='Collection genre')),
            ],
        ),
        migrations.CreateModel(
            name='GeographicProvenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(choices=[('1', 'Afghanistan'), ('3', 'Albania'), ('4', 'Algeria'), ('5', 'American Samoa'), ('6', 'Andorra'), ('7', 'Angola'), ('8', 'Anguilla'), ('9', 'Antarctica'), ('10', 'Antigua and Barbuda'), ('11', 'Argentina'), ('12', 'Armenia'), ('13', 'Aruba'), ('14', 'Australia'), ('15', 'Austria'), ('16', 'Azerbaijan'), ('17', 'Bahamas'), ('18', 'Bahrain'), ('19', 'Bangladesh'), ('20', 'Barbados'), ('21', 'Belarus'), ('22', 'Belgium'), ('23', 'Belize'), ('24', 'Benin'), ('25', 'Bermuda'), ('26', 'Bhutan'), ('27', 'Bolivia (Plurinational State of)'), ('28', 'Bonaire, Sint Eustatius and Saba'), ('29', 'Bosnia and Herzegovina'), ('30', 'Botswana'), ('31', 'Bouvet Island'), ('32', 'Brazil'), ('33', 'British Indian Ocean Territory'), ('34', 'Brunei Darussalam'), ('35', 'Bulgaria'), ('36', 'Burkina Faso'), ('37', 'Burundi'), ('38', 'Cabo Verde'), ('39', 'Cambodia'), ('40', 'Cameroon'), ('41', 'Canada'), ('42', 'Cayman Islands'), ('43', 'Central African Republic'), ('44', 'Chad'), ('45', 'Chile'), ('46', 'China'), ('47', 'Christmas Island'), ('48', 'Cocos (Keeling) Islands'), ('49', 'Colombia'), ('50', 'Comoros'), ('51', 'Congo'), ('52', 'Congo (Democratic Republic of the)'), ('53', 'Cook Islands'), ('54', 'Costa Rica'), ('56', 'Croatia'), ('57', 'Cuba'), ('58', 'Curaçao'), ('59', 'Cyprus'), ('60', 'Czech Republic'), ('55', "Côte d'Ivoire"), ('61', 'Denmark'), ('62', 'Djibouti'), ('63', 'Dominica'), ('64', 'Dominican Republic'), ('65', 'Ecuador'), ('66', 'Egypt'), ('67', 'El Salvador'), ('68', 'Equatorial Guinea'), ('69', 'Eritrea'), ('70', 'Estonia'), ('71', 'Ethiopia'), ('72', 'Falkland Islands (Malvinas)'), ('73', 'Faroe Islands'), ('74', 'Fiji'), ('75', 'Finland'), ('76', 'France'), ('77', 'French Guiana'), ('78', 'French Polynesia'), ('79', 'French Southern Territories'), ('80', 'Gabon'), ('81', 'Gambia'), ('82', 'Georgia'), ('83', 'Germany'), ('84', 'Ghana'), ('85', 'Gibraltar'), ('86', 'Greece'), ('87', 'Greenland'), ('88', 'Grenada'), ('89', 'Guadeloupe'), ('90', 'Guam'), ('91', 'Guatemala'), ('92', 'Guernsey'), ('93', 'Guinea'), ('94', 'Guinea-Bissau'), ('95', 'Guyana'), ('96', 'Haiti'), ('97', 'Heard Island and McDonald Islands'), ('98', 'Holy See'), ('99', 'Honduras'), ('100', 'Hong Kong'), ('101', 'Hungary'), ('102', 'Iceland'), ('103', 'India'), ('104', 'Indonesia'), ('105', 'Iran (Islamic Republic of)'), ('106', 'Iraq'), ('107', 'Ireland'), ('108', 'Ireland'), ('109', 'Isle of Man'), ('110', 'Israel'), ('111', 'Italy'), ('112', 'Jamaica'), ('113', 'Japan'), ('114', 'Jersey'), ('115', 'Jordan'), ('116', 'Kazakhstan'), ('117', 'Kenya'), ('118', 'Kiribati'), ('119', "Korea (Democratic People's Republic of)"), ('120', 'Korea (Republic of)'), ('121', 'Kuwait'), ('122', 'Kyrgyzstan'), ('123', "Lao People's Democratic Republic"), ('124', 'Latvia'), ('125', 'Lebanon'), ('126', 'Lesotho'), ('127', 'Liberia'), ('128', 'Libya'), ('129', 'Liechtenstein'), ('130', 'Lithuania'), ('131', 'Luxembourg'), ('132', 'Macao'), ('133', 'Macedonia (the former Yugoslav Republic of)'), ('134', 'Madagascar'), ('135', 'Malawi'), ('136', 'Malaysia'), ('137', 'Maldives'), ('138', 'Mali'), ('139', 'Malta'), ('140', 'Marshall Islands'), ('141', 'Martinique'), ('142', 'Mauritania'), ('143', 'Mauritius'), ('144', 'Mayotte'), ('145', 'Mexico'), ('146', 'Micronesia (Federated States of)'), ('147', 'Moldova (Republic of)'), ('148', 'Monaco'), ('149', 'Mongolia'), ('150', 'Montenegro'), ('151', 'Montserrat'), ('152', 'Morocco'), ('153', 'Mozambique'), ('154', 'Myanmar'), ('155', 'Namibia'), ('156', 'Nauru'), ('157', 'Nepal'), ('158', 'Netherlands'), ('159', 'New Caledonia'), ('160', 'New Zealand'), ('161', 'Nicaragua'), ('162', 'Niger'), ('163', 'Nigeria'), ('164', 'Niue'), ('165', 'Norfolk Island'), ('166', 'Northern Mariana Islands'), ('167', 'Norway'), ('168', 'Oman'), ('170', 'Pakistan'), ('171', 'Palau'), ('172', 'Palestine, State of'), ('173', 'Panama'), ('174', 'Papua New Guinea'), ('175', 'Paraguay'), ('176', 'Peru'), ('177', 'Philippines'), ('178', 'Pitcairn'), ('179', 'Poland'), ('180', 'Portugal'), ('181', 'Puerto Rico'), ('182', 'Qatar'), ('184', 'Romania'), ('185', 'Russian Federation'), ('186', 'Rwanda'), ('183', 'Réunion'), ('187', 'Saint Barthélemy'), ('188', 'Saint Helena, Ascension and Tristan da Cunha'), ('189', 'Saint Kitts and Nevis'), ('190', 'Saint Lucia'), ('191', 'Saint Martin (French part)'), ('192', 'Saint Pierre and Miquelon'), ('193', 'Saint Vincent and the Grenadines'), ('194', 'Samoa'), ('195', 'San Marino'), ('196', 'Sao Tome and Principe'), ('197', 'Saudi Arabia'), ('198', 'Senegal'), ('199', 'Serbia'), ('200', 'Seychelles'), ('201', 'Sierra Leone'), ('202', 'Singapore'), ('203', 'Sint Maarten (Dutch part)'), ('204', 'Slovakia'), ('205', 'Slovenia'), ('206', 'Solomon Islands'), ('207', 'Somalia'), ('208', 'South Africa'), ('209', 'South Georgia and the South Sandwich Islands'), ('210', 'South Sudan'), ('211', 'Spain'), ('212', 'Sri Lanka'), ('213', 'Sudan'), ('214', 'Suriname'), ('215', 'Svalbard and Jan Mayen'), ('216', 'Swaziland'), ('217', 'Sweden'), ('218', 'Switzerland'), ('219', 'Syrian Arab Republic'), ('220', 'Taiwan, Province of China[a]'), ('221', 'Tajikistan'), ('222', 'Tanzania, United Republic of'), ('223', 'Thailand'), ('224', 'Timor-Leste'), ('225', 'Togo'), ('226', 'Tokelau'), ('227', 'Tonga'), ('228', 'Trinidad and Tobago'), ('229', 'Tunisia'), ('230', 'Turkey'), ('231', 'Turkmenistan'), ('232', 'Turks and Caicos Islands'), ('233', 'Tuvalu'), ('234', 'Uganda'), ('235', 'Ukraine'), ('236', 'United Arab Emirates'), ('237', 'United Kingdom of Great Britain and Northern '), ('238', 'United States Minor Outlying Islands'), ('239', 'United States of America'), ('240', 'Uruguay'), ('241', 'Uzbekistan'), ('242', 'Vanuatu'), ('243', 'Venezuela (Bolivarian Republic of)'), ('244', 'Viet Nam'), ('245', 'Virgin Islands (British)'), ('246', 'Virgin Islands (U.S.)'), ('247', 'Wallis and Futuna'), ('248', 'Western Sahara'), ('249', 'Yemen'), ('250', 'Zambia'), ('251', 'Zimbabwe'), ('169', 'other'), ('252', 'unknown'), ('2', 'Åland Islands')], default='0', help_text='Name of the country (ISO-3166 code)', max_length=5, verbose_name='Country included in this geographic coverage')),
                ('place', models.ManyToManyField(blank=True, to='collection.City')),
            ],
        ),
        migrations.CreateModel(
            name='HelpChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=200)),
                ('searchable', models.BooleanField(default=False)),
                ('display_name', models.CharField(max_length=50)),
                ('help_url', models.URLField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='Interactivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'interactive'), ('3', 'non-interactive'), ('4', 'other'), ('2', 'semi-interactive'), ('5', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2476_d4606c12-013a-0155-14e2-daa5a4400ef2'>Interactivity type</a>", max_length=5, verbose_name='Interactivity')),
            ],
        ),
        migrations.CreateModel(
            name='Involvement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'elicited'), ('2', 'non-elicited'), ('3', 'not-observed'), ('4', 'other'), ('5', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2477_e8c26158-647f-fcdb-2dd1-7cc7457e7f8e'>Involvement type</a>", max_length=5, verbose_name='Type of involvement')),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'Abkhazian'), ('2', 'Achinese'), ('3', 'Acoli'), ('4', 'Adangme'), ('5', 'Adyghe; Adygei'), ('6', 'Afar'), ('7', 'Afrihili'), ('8', 'Afrikaans'), ('9', 'Afro-Asiatic languages'), ('10', 'Ainu'), ('11', 'Akan'), ('12', 'Akkadian'), ('13', 'Albanian'), ('14', 'Aleut'), ('15', 'Algonquian languages'), ('16', 'Altaic languages'), ('17', 'Altaic languages'), ('18', 'Amharic'), ('19', 'Angika'), ('20', 'Apache languages'), ('21', 'Arabic'), ('22', 'Aragonese'), ('23', 'Arapaho'), ('24', 'Arawak'), ('25', 'Armenian'), ('26', 'Aromanian; Arumanian; Macedo-Romanian'), ('27', 'Artificial languages'), ('28', 'Assamese'), ('29', 'Asturian; Bable; Leonese; Asturleonese'), ('30', 'Athapascan languages'), ('31', 'Australian languages'), ('32', 'Austronesian languages'), ('33', 'Avaric'), ('34', 'Avestan'), ('35', 'Awadhi'), ('36', 'Aymara'), ('37', 'Azerbaijani'), ('38', 'Balinese'), ('39', 'Baltic languages'), ('40', 'Baluchi'), ('41', 'Bambara'), ('42', 'Bamileke languages'), ('43', 'Banda languages'), ('44', 'Bantu languages'), ('45', 'Basa'), ('46', 'Bashkir'), ('47', 'Basque'), ('48', 'Batak languages'), ('49', 'Beja; Bedawiyet'), ('50', 'Belarusian'), ('51', 'Bemba'), ('52', 'Bengali'), ('53', 'Berber languages'), ('54', 'Bhojpuri'), ('55', 'Bihari languages'), ('56', 'Bikol'), ('57', 'Bini; Edo'), ('58', 'Bislama'), ('59', 'Blin; Bilin'), ('60', 'Blissymbols; Blissymbolics; Bliss'), ('61', 'Blissymbols; Blissymbolics; Bliss'), ('62', 'Bokmål, Norwegian; Norwegian Bokmål'), ('63', 'Bosnian'), ('64', 'Braj'), ('65', 'Breton'), ('66', 'Buginese'), ('67', 'Bulgarian'), ('68', 'Buriat'), ('69', 'Burmese'), ('70', 'Caddo'), ('71', 'Catalan; Valencian'), ('72', 'Caucasian languages'), ('73', 'Cebuano'), ('74', 'Celtic languages'), ('75', 'Central American Indian languages'), ('76', 'Central Khmer'), ('77', 'Chagatai'), ('78', 'Chamic languages'), ('79', 'Chamorro'), ('80', 'Chechen'), ('81', 'Cherokee'), ('82', 'Cheyenne'), ('83', 'Chibcha'), ('84', 'Chichewa; Chewa; Nyanja'), ('85', 'Chinese'), ('86', 'Chinese'), ('87', 'Chinook jargon'), ('88', 'Chipewyan; Dene Suline'), ('89', 'Choctaw'), ('90', 'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'), ('91', 'Chuukese'), ('92', 'Chuvash'), ('93', 'Classical Newari; Old Newari; Classical Nepal Bhasa'), ('94', 'Classical Syriac'), ('95', 'Coptic'), ('96', 'Cornish'), ('97', 'Corsican'), ('98', 'Cree'), ('99', 'Creek'), ('100', 'Creoles and pidgins'), ('101', 'Creoles and pidgins, English based'), ('102', 'Creoles and pidgins, French-based'), ('103', 'Creoles and pidgins, Portuguese-based'), ('104', 'Crimean Tatar; Crimean Turkish'), ('105', 'Croatian'), ('106', 'Cushitic languages'), ('107', 'Czech'), ('108', 'Dakota'), ('109', 'Danish'), ('110', 'Dargwa'), ('111', 'Delaware'), ('112', 'Dinka'), ('113', 'Divehi; Dhivehi; Maldivian'), ('114', 'Dogri'), ('115', 'Dogrib'), ('116', 'Dravidian languages'), ('117', 'Duala'), ('118', 'Dutch, Middle (ca.1050-1350)'), ('119', 'Dutch; Flemish'), ('120', 'Dyula'), ('121', 'Dzongkha'), ('122', 'Eastern Frisian'), ('123', 'Efik'), ('124', 'Egyptian (Ancient)'), ('125', 'Ekajuk'), ('126', 'Elamite'), ('127', 'English'), ('128', 'English, Middle (1100-1500)'), ('129', 'English, Old (ca.450-1100)'), ('130', 'Erzya'), ('131', 'Esperanto'), ('132', 'Estonian'), ('133', 'Ewe'), ('134', 'Ewondo'), ('135', 'Fang'), ('136', 'Fanti'), ('137', 'Faroese'), ('138', 'Fijian'), ('139', 'Filipino; Pilipino'), ('140', 'Finnish'), ('141', 'Finno-Ugrian languages'), ('142', 'Fon'), ('143', 'French'), ('144', 'French, Middle (ca.1400-1600)'), ('145', 'French, Old (842-ca.1400)'), ('146', 'Friulian'), ('147', 'Fulah'), ('148', 'Ga'), ('149', 'Gaelic; Scottish Gaelic'), ('150', 'Galibi Carib'), ('151', 'Galician'), ('152', 'Ganda'), ('153', 'Gayo'), ('154', 'Gbaya'), ('155', 'Geez'), ('156', 'Georgian'), ('157', 'German'), ('158', 'German, Middle High (ca.1050-1500)'), ('159', 'German, Old High (ca.750-1050)'), ('160', 'Germanic languages'), ('161', 'Gilbertese'), ('162', 'Gondi'), ('163', 'Gorontalo'), ('164', 'Gothic'), ('165', 'Grebo'), ('166', 'Greek, Ancient (to 1453)'), ('167', 'Greek, Modern (1453-)'), ('168', 'Guarani'), ('169', 'Gujarati'), ('170', "Gwich'in"), ('171', 'Haida'), ('172', 'Haitian; Haitian Creole'), ('173', 'Hausa'), ('174', 'Hawaiian'), ('175', 'Hebrew'), ('176', 'Herero'), ('177', 'Hiligaynon'), ('178', 'Himachali languages; Western Pahari languages'), ('179', 'Hindi'), ('180', 'Hiri Motu'), ('181', 'Hittite'), ('182', 'Hmong; Mong'), ('183', 'Hungarian'), ('184', 'Hupa'), ('185', 'Iban'), ('186', 'Icelandic'), ('187', 'Ido'), ('188', 'Igbo'), ('189', 'Ijo languages'), ('190', 'Iloko'), ('191', 'Inari Sami'), ('192', 'Indic languages'), ('193', 'Indo-European languages'), ('194', 'Indonesian'), ('195', 'Ingush'), ('196', 'Interlingua (International Auxiliary Language Association)'), ('197', 'Interlingue; Occidental'), ('198', 'Inuktitut'), ('199', 'Inupiaq'), ('200', 'Iranian languages'), ('201', 'Irish'), ('202', 'Irish, Middle (900-1200)'), ('203', 'Irish, Old (to 900)'), ('204', 'Iroquoian languages'), ('205', 'Italian'), ('206', 'Japanese'), ('207', 'Javanese'), ('208', 'Judeo-Arabic'), ('209', 'Judeo-Persian'), ('210', 'Kabardian'), ('211', 'Kabyle'), ('212', 'Kachin; Jingpho'), ('213', 'Kalaallisut; Greenlandic'), ('214', 'Kalmyk; Oirat'), ('215', 'Kalmyk; Oirat'), ('216', 'Kamba'), ('217', 'Kannada'), ('218', 'Kanuri'), ('220', 'Kara-Kalpak'), ('219', 'Karachay-Balkar'), ('221', 'Karelian'), ('222', 'Karen languages'), ('223', 'Kashmiri'), ('224', 'Kashubian'), ('225', 'Kawi'), ('226', 'Kazakh'), ('227', 'Khasi'), ('228', 'Khoisan languages'), ('229', 'Khotanese; Sakan'), ('230', 'Kikuyu; Gikuyu'), ('231', 'Kimbundu'), ('232', 'Kinyarwanda'), ('233', 'Kirghiz; Kyrgyz'), ('234', 'Klingon; tlhIngan-Hol'), ('235', 'Klingon; tlhIngan-Hol'), ('236', 'Komi'), ('237', 'Kongo'), ('238', 'Konkani'), ('239', 'Korean'), ('240', 'Kosraean'), ('241', 'Kpelle'), ('242', 'Kru languages'), ('243', 'Kuanyama; Kwanyama'), ('244', 'Kumyk'), ('245', 'Kurdish'), ('246', 'Kurukh'), ('247', 'Kutenai'), ('248', 'Ladino'), ('249', 'Lahnda'), ('250', 'Lamba'), ('251', 'Land Dayak languages'), ('252', 'Lao'), ('253', 'Latin'), ('254', 'Latvian'), ('255', 'Lezghian'), ('256', 'Limburgan; Limburger; Limburgish'), ('257', 'Lingala'), ('258', 'Lithuanian'), ('259', 'Lojban'), ('260', 'Low German; Low Saxon; German, Low; Saxon, Low'), ('261', 'Lower Sorbian'), ('262', 'Lozi'), ('263', 'Luba-Katanga'), ('264', 'Luba-Lulua'), ('265', 'Luiseno'), ('266', 'Lule Sami'), ('267', 'Lunda'), ('268', 'Luo (Kenya and Tanzania)'), ('269', 'Lushai'), ('270', 'Luxembourgish; Letzeburgesch'), ('271', 'Macedonian'), ('272', 'Madurese'), ('273', 'Magahi'), ('274', 'Maithili'), ('275', 'Makasar'), ('276', 'Malagasy'), ('277', 'Malay'), ('278', 'Malayalam'), ('279', 'Maltese'), ('280', 'Manchu'), ('281', 'Mandar'), ('282', 'Mandingo'), ('283', 'Manipuri'), ('284', 'Manobo languages'), ('285', 'Manx'), ('286', 'Maori'), ('287', 'Mapudungun; Mapuche'), ('288', 'Marathi'), ('289', 'Mari'), ('290', 'Marshallese'), ('291', 'Marwari'), ('292', 'Masai'), ('293', 'Mayan languages'), ('294', 'Mende'), ('295', "Mi'kmaq; Micmac"), ('296', 'Minangkabau'), ('297', 'Mirandese'), ('298', 'Mohawk'), ('299', 'Moksha'), ('302', 'Mon-Khmer languages'), ('300', 'Mongo'), ('301', 'Mongolian'), ('303', 'Mossi'), ('304', 'Multiple languages'), ('305', 'Munda languages'), ('319', "N'Ko"), ('306', 'Nahuatl languages'), ('307', 'Nauru'), ('308', 'Navajo; Navaho'), ('309', 'Ndebele, North; North Ndebele'), ('310', 'Ndebele, South; South Ndebele'), ('311', 'Ndonga'), ('312', 'Neapolitan'), ('313', 'Nepal Bhasa; Newari'), ('314', 'Nepali'), ('315', 'Nias'), ('316', 'Niger-Kordofanian languages'), ('317', 'Nilo-Saharan languages'), ('318', 'Niuean'), ('320', 'No linguistic content; Not applicable'), ('321', 'Nogai'), ('322', 'Norse, Old'), ('323', 'North American Indian languages'), ('324', 'Northern Frisian'), ('325', 'Northern Sami'), ('326', 'Norwegian'), ('327', 'Norwegian Nynorsk; Nynorsk, Norwegian'), ('328', 'Nubian languages'), ('329', 'Nyamwezi'), ('330', 'Nyankole'), ('331', 'Nyoro'), ('332', 'Nzima'), ('333', 'Occitan (post 1500)'), ('334', 'Official Aramaic (700-300 BCE); Imperial Aramaic (700-300 BCE)'), ('335', 'Ojibwa'), ('336', 'Oriya'), ('337', 'Oromo'), ('338', 'Osage'), ('339', 'Ossetian; Ossetic'), ('340', 'Otomian languages'), ('341', 'Pahlavi'), ('342', 'Palauan'), ('343', 'Pali'), ('344', 'Pampanga; Kapampangan'), ('345', 'Pangasinan'), ('346', 'Panjabi; Punjabi'), ('347', 'Papiamento'), ('348', 'Papuan languages'), ('349', 'Pedi; Sepedi; Northern Sotho'), ('350', 'Persian'), ('351', 'Persian, Old (ca.600-400 B.C.)'), ('352', 'Philippine languages'), ('353', 'Phoenician'), ('354', 'Pohnpeian'), ('355', 'Polish'), ('356', 'Portuguese'), ('357', 'Prakrit languages'), ('358', 'Provençal, Old (to 1500); Occitan, Old (to 1500)'), ('359', 'Pushto; Pashto'), ('360', 'Quechua'), ('361', 'Rajasthani'), ('362', 'Rapanui'), ('363', 'Rarotongan; Cook Islands Maori'), ('364', 'Reserved for local use'), ('365', 'Romance languages'), ('366', 'Romanian'), ('367', 'Romansh'), ('368', 'Romany'), ('369', 'Rundi'), ('370', 'Russian'), ('371', 'Salishan languages'), ('372', 'Samaritan Aramaic'), ('373', 'Sami languages'), ('374', 'Samoan'), ('375', 'Sandawe'), ('376', 'Sango'), ('377', 'Sanskrit'), ('378', 'Santali'), ('379', 'Sardinian'), ('380', 'Sasak'), ('381', 'Scots'), ('382', 'Selkup'), ('383', 'Semitic languages'), ('384', 'Serbian'), ('385', 'Serer'), ('386', 'Shan'), ('387', 'Shona'), ('388', 'Sichuan Yi; Nuosu'), ('389', 'Sicilian'), ('390', 'Sidamo'), ('391', 'Sign Languages'), ('392', 'Siksika'), ('393', 'Sindhi'), ('394', 'Sinhala; Sinhalese'), ('395', 'Sino-Tibetan languages'), ('396', 'Siouan languages'), ('397', 'Skolt Sami'), ('398', 'Slave (Athapascan)'), ('399', 'Slavic languages'), ('400', 'Slovak'), ('401', 'Slovenian'), ('402', 'Sogdian'), ('403', 'Somali'), ('404', 'Songhai languages'), ('405', 'Soninke'), ('406', 'Sorbian languages'), ('407', 'Sotho, Southern'), ('408', 'South American Indian languages'), ('409', 'Southern Altai'), ('410', 'Southern Sami'), ('411', 'Spanish; Castilian'), ('412', 'Sranan Tongo'), ('413', 'Standard Moroccan Tamazight'), ('414', 'Sukuma'), ('415', 'Sumerian'), ('416', 'Sundanese'), ('417', 'Susu'), ('418', 'Swahili'), ('419', 'Swati'), ('420', 'Swedish'), ('421', 'Swiss German; Alemannic; Alsatian'), ('422', 'Syriac'), ('423', 'Tagalog'), ('424', 'Tahitian'), ('425', 'Tai languages'), ('426', 'Tajik'), ('427', 'Tamashek'), ('428', 'Tamil'), ('429', 'Tatar'), ('430', 'Telugu'), ('431', 'Tereno'), ('432', 'Tetum'), ('433', 'Thai'), ('434', 'Tibetan'), ('435', 'Tigre'), ('436', 'Tigrinya'), ('437', 'Timne'), ('438', 'Tiv'), ('439', 'Tlingit'), ('440', 'Tok Pisin'), ('441', 'Tokelau'), ('442', 'Tonga (Nyasa)'), ('443', 'Tonga (Tonga Islands)'), ('444', 'Tsimshian'), ('445', 'Tsonga'), ('446', 'Tswana'), ('447', 'Tumbuka'), ('448', 'Tupi languages'), ('449', 'Turkish'), ('450', 'Turkish, Ottoman (1500-1928)'), ('451', 'Turkmen'), ('452', 'Tuvalu'), ('453', 'Tuvinian'), ('454', 'Twi'), ('455', 'Udmurt'), ('456', 'Ugaritic'), ('457', 'Uighur; Uyghur'), ('458', 'Ukrainian'), ('459', 'Umbundu'), ('460', 'Uncoded languages'), ('461', 'Undetermined'), ('462', 'Upper Sorbian'), ('463', 'Urdu'), ('464', 'Uzbek'), ('465', 'Vai'), ('466', 'Venda'), ('467', 'Vietnamese'), ('468', 'Volapük'), ('469', 'Votic'), ('470', 'Wakashan languages'), ('471', 'Walloon'), ('472', 'Waray'), ('473', 'Washo'), ('474', 'Welsh'), ('475', 'Western Frisian'), ('476', 'Wolaitta; Wolaytta'), ('477', 'Wolof'), ('478', 'Xhosa'), ('479', 'Yakut'), ('480', 'Yao'), ('481', 'Yapese'), ('482', 'Yiddish'), ('483', 'Yoruba'), ('484', 'Yupik languages'), ('485', 'Zande languages'), ('486', 'Zapotec'), ('487', 'Zaza; Dimili; Dimli; Kirdki; Kirmanjki; Zazaki'), ('488', 'Zenaga'), ('489', 'Zhuang; Chuang'), ('490', 'Zulu'), ('491', 'Zuni'), ('493', 'other'), ('492', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2484_669684e7-cb9e-ea96-59cb-a25fe89b9b9d'>Name of the language</a>", max_length=5, verbose_name='Language in collection')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageDisorder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='unknown', help_text='Language disorder (conform ActorCharacteristics: LanguageImpairment which is restricted to children)', max_length=50, verbose_name='Language disorder')),
            ],
        ),
        migrations.CreateModel(
            name='LicenseName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2457_45bbaa1a-7002-2ecd-ab9d-57a189f694a6'>Access: name of the license</a>", verbose_name='Name of the license')),
            ],
        ),
        migrations.CreateModel(
            name='LicenseUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.URLField(help_text='Access: URL to the license (URL to the license)', verbose_name='URL of the license')),
            ],
        ),
        migrations.CreateModel(
            name='Linguality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='LingualityAgeGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'adult'), ('2', 'child'), ('3', 'unknown')], default='0', help_text='Age group of linguality (new category)', max_length=5, verbose_name='Age group of linguality')),
            ],
        ),
        migrations.CreateModel(
            name='LingualityNativeness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'native'), ('2', 'non-native'), ('3', 'unknown')], default='0', help_text='Nativeness type of linguality (new category)', max_length=5, verbose_name='Nativeness type of linguality')),
            ],
        ),
        migrations.CreateModel(
            name='LingualityStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'impaired'), ('1', 'normal'), ('3', 'unknown')], default='0', help_text='Status of linguality (new category)', max_length=5, verbose_name='Status of linguality')),
            ],
        ),
        migrations.CreateModel(
            name='LingualityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'bilingual'), ('1', 'monolingual'), ('3', 'multilingual'), ('4', 'other'), ('5', 'unknown')], default='0', help_text='Type of linguality (new category)', max_length=5, verbose_name='Type of linguality')),
            ],
        ),
        migrations.CreateModel(
            name='LingualityVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'dialect'), ('4', 'other'), ('3', 'regiolect'), ('1', 'standard'), ('5', 'unknown')], default='0', help_text='Variant of linguality (new category)', max_length=5, verbose_name='Variant of linguality')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MediaFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'application/pdf'), ('2', 'application/smil+xml'), ('3', 'audio/x-aiff'), ('4', 'audio/x-mp2'), ('5', 'audio/x-mp3'), ('6', 'audio/x-mpeg4'), ('7', 'audio/x-wav'), ('11', 'image/gif'), ('8', 'image/jpeg'), ('9', 'image/png'), ('10', 'image/tiff'), ('20', 'other'), ('14', 'text/folia'), ('12', 'text/html'), ('13', 'text/tei'), ('21', 'unknown'), ('18', 'video/quicktime'), ('15', 'video/x-mpeg1'), ('16', 'video/x-mpeg2'), ('17', 'video/x-mpeg4'), ('19', 'video/x-msvideo')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2571_2be2e583-e5af-34c2-3673-93359ec1f7df'>Format of this resource medium</a>", max_length=5, verbose_name='Format of a medium')),
            ],
        ),
        migrations.CreateModel(
            name='MultilingualityType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('3', 'codeSwitching'), ('2', 'multilingualSingletext'), ('4', 'other'), ('1', 'parallel'), ('5', 'unknown')], default='0', help_text='Type of multi-linguality (new category)', max_length=5, verbose_name='Type of multi-linguality')),
            ],
        ),
        migrations.CreateModel(
            name='NonCommercialUsageOnly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'no'), ('1', 'yes')], default='0', help_text='Access: non-commercial usage (Boolean)', max_length=5, verbose_name='Non-commercial usage only access')),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2979_8030473e-bbcb-6b87-3fd2-90554429ec50'>Organisation</a>", verbose_name='Name of organization')),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2956_519a4aab-2f76-0fd3-090e-f0d6b81a7dbb'>One of the owners of the collection</a>", verbose_name='One of the collection or resource owners')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2978_0e9e4864-44c4-de22-66b1-9b38bca10836'>Person</a>", verbose_name='Name of person')),
            ],
        ),
        migrations.CreateModel(
            name='PID',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2573_ae7c2548-8a86-ab6e-7099-e28b7697d1a2'>Persistent identifier</a>", verbose_name='Persistent identifier of the collection')),
            ],
        ),
        migrations.CreateModel(
            name='PlanningType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('4', 'other'), ('3', 'planned'), ('2', 'semi-spontaneous'), ('1', 'spontaneous'), ('5', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2492_304b514c-3633-e348-ddef-f9222c288e10'>Planning type</a>", max_length=5, verbose_name='Type of planning')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2537_fa206273-223a-f4fa-dde3-ba59b965701f'>Title of project</a>", verbose_name='Project title')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectFunder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2522_3bdc6af1-bf1b-3f5d-2938-62d99a1980ab'>Funder of project</a>", verbose_name='Funder of project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectUrl',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.URLField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2546_180dca37-c1d8-dffe-5d46-8f16de143320'>URL of project</a>", verbose_name='URL of project')),
            ],
        ),
        migrations.CreateModel(
            name='Provenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geographicProvenance', models.ManyToManyField(blank=True, to='collection.GeographicProvenance')),
            ],
        ),
        migrations.CreateModel(
            name='RecordingCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2566_5a4ee887-bc58-38ee-9b1e-a06f1916d63c'>Condition</a>", verbose_name='Recording condition')),
            ],
        ),
        migrations.CreateModel(
            name='RecordingEnvironment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'home/office'), ('6', 'other'), ('3', 'public-place'), ('2', 'studio'), ('4', 'telephone'), ('7', 'unknown'), ('5', 'vehicle')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2696_d3b0e503-d971-8849-5c6f-128cf2f56fb4'>Recording environment</a>", max_length=5, verbose_name='Environment for the recording')),
            ],
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='0', help_text="See: <a href='http://purl.org/dc/terms/relation'>Relation</a>", max_length=5, verbose_name='Relation with something else')),
            ],
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, verbose_name='Description of this resource')),
                ('type', models.CharField(choices=[('13', 'Dataset:frequencylist-POStags'), ('11', 'Dataset:frequencylist-lemmas'), ('14', 'Dataset:frequencylist-ngrams'), ('17', 'Dataset:frequencylist-other'), ('15', 'Dataset:frequencylist-phrasetypes'), ('16', 'Dataset:frequencylist-sentencetypes'), ('12', 'Dataset:frequencylist-wordtypes'), ('3', 'Dataset:lexicon'), ('6', 'Dataset:list-POStags'), ('4', 'Dataset:list-lemmas'), ('7', 'Dataset:list-ngrams'), ('10', 'Dataset:list-other'), ('8', 'Dataset:list-phrasetypes'), ('9', 'Dataset:list-sentencetypes'), ('5', 'Dataset:list-wordtypes'), ('2', 'Dataset:table'), ('1', 'Dataset:treebank'), ('24', 'Image:moving-animation'), ('25', 'Image:moving-film'), ('26', 'Image:moving-other'), ('22', 'Image:still-drawing'), ('19', 'Image:still-graph'), ('18', 'Image:still-map'), ('23', 'Image:still-other'), ('21', 'Image:still-photo'), ('20', 'Image:still-picture'), ('27', 'InteractiveResource'), ('33', 'Other'), ('30', 'Sound:music'), ('31', 'Sound:other'), ('29', 'Sound:songs'), ('28', 'Sound:speech'), ('32', 'Text')], help_text="See: <a href='http://dublincore.org/documents/2012/06/14/dcmi-terms/?v=terms#type'>Type of this resource (Dublin Core)</a>", max_length=5, verbose_name='Type of this resource')),
                ('annotation', models.ManyToManyField(to='collection.Annotation')),
                ('media', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.Media')),
            ],
        ),
        migrations.CreateModel(
            name='ResourceCreator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ManyToManyField(to='collection.Organization')),
                ('person', models.ManyToManyField(to='collection.Person')),
            ],
        ),
        migrations.CreateModel(
            name='SocialContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('4', 'controlled environment'), ('1', 'family'), ('5', 'other'), ('2', 'private'), ('3', 'public'), ('6', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2493_692957bc-2214-5175-99e5-c727b37ddf0f'>Social context</a>", max_length=5, verbose_name='Social context')),
            ],
        ),
        migrations.CreateModel(
            name='SpeechCorpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('durationOfEffectiveSpeech', models.TextField(blank=True, default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2691_5c1c9d59-cc6d-da0a-cf24-1ee36f0947a7'>Duration of the effective speech</a>", verbose_name='Duration of effective speech')),
                ('durationOfFullDatabase', models.TextField(blank=True, default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2690_3d45e6f3-0827-1b1f-b5a5-2ab3b13450fd'>Duration of the full database</a>", verbose_name='Duration of full database')),
                ('numberOfSpeakers', models.IntegerField(blank=True, default=0, help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2692_35679421-596d-40dd-8482-44741eea4f15'>Number of speakers involved</a>", verbose_name='Number of speakers')),
                ('speakerDemographics', models.TextField(blank=True, default='-', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2960_8a25637f-1367-741e-8708-6f171ced559c'>Demographics of the speaker</a>", verbose_name='Speaker demographics')),
                ('audience', models.ManyToManyField(blank=True, to='collection.Audience')),
                ('channel', models.ManyToManyField(blank=True, to='collection.Channel')),
                ('conversationalType', models.ManyToManyField(blank=True, to='collection.ConversationalType')),
                ('interactivity', models.ManyToManyField(blank=True, to='collection.Interactivity')),
                ('involvement', models.ManyToManyField(blank=True, to='collection.Involvement')),
                ('planningType', models.ManyToManyField(blank=True, to='collection.PlanningType')),
                ('recordingConditions', models.ManyToManyField(blank=True, to='collection.RecordingCondition')),
                ('recordingEnvironment', models.ManyToManyField(blank=True, to='collection.RecordingEnvironment')),
                ('socialContext', models.ManyToManyField(blank=True, to='collection.SocialContext')),
            ],
        ),
        migrations.CreateModel(
            name='TemporalProvenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startYear', models.IntegerField(default=2016, verbose_name='First year covered by the collection')),
                ('endYear', models.IntegerField(default=2016, verbose_name='Last year covered by the collection')),
            ],
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2544_3626545e-a21d-058c-ebfd-241c0464e7e5'>A title of the collection</a>", verbose_name='Title used for the collection as a whole')),
            ],
        ),
        migrations.CreateModel(
            name='TotalSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.IntegerField(default=0, verbose_name='Size of the collection')),
                ('sizeUnit', models.CharField(default='MB', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2583_5f5cb491-1037-8d46-d685-ccebfc0233f7'>Units used for the amount</a>", max_length=50, verbose_name='Units')),
            ],
        ),
        migrations.CreateModel(
            name='Validation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ValidationMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('1', 'automatic'), ('2', 'manual'), ('3', 'semi-automatic'), ('4', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2586_75098d25-a517-983f-817c-2b05c5ce361a'>Validation method</a>", max_length=5, verbose_name='Validation method')),
            ],
        ),
        migrations.CreateModel(
            name='ValidationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('2', 'content'), ('1', 'formal'), ('3', 'formal/content'), ('4', 'other'), ('5', 'unknown')], default='0', help_text="See: <a href='http://hdl.handle.net/11459/CCR_C-2587_026dcaa6-8ece-3364-8492-6479e70f66de'>Validation type</a>", max_length=5, verbose_name='Validation type')),
            ],
        ),
        migrations.CreateModel(
            name='WrittenCorpus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('characterEncoding', models.ManyToManyField(blank=True, to='collection.CharacterEncoding')),
            ],
        ),
        migrations.AddField(
            model_name='validation',
            name='method',
            field=models.ManyToManyField(blank=True, to='collection.ValidationMethod'),
        ),
        migrations.AddField(
            model_name='validation',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.ValidationType'),
        ),
        migrations.AddField(
            model_name='resource',
            name='totalSize',
            field=models.ManyToManyField(blank=True, to='collection.TotalSize'),
        ),
        migrations.AddField(
            model_name='provenance',
            name='temporalProvenance',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='collection.TemporalProvenance'),
        ),
        migrations.AddField(
            model_name='project',
            name='URL',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.ProjectUrl'),
        ),
        migrations.AddField(
            model_name='project',
            name='funder',
            field=models.ManyToManyField(blank=True, to='collection.ProjectFunder'),
        ),
        migrations.AddField(
            model_name='media',
            name='format',
            field=models.ManyToManyField(blank=True, to='collection.MediaFormat'),
        ),
        migrations.AddField(
            model_name='linguality',
            name='lingualityAgeGroup',
            field=models.ManyToManyField(blank=True, to='collection.LingualityAgeGroup'),
        ),
        migrations.AddField(
            model_name='linguality',
            name='lingualityNativeness',
            field=models.ManyToManyField(blank=True, to='collection.LingualityNativeness'),
        ),
        migrations.AddField(
            model_name='linguality',
            name='lingualityStatus',
            field=models.ManyToManyField(blank=True, to='collection.LingualityStatus'),
        ),
        migrations.AddField(
            model_name='linguality',
            name='lingualityType',
            field=models.ManyToManyField(blank=True, to='collection.LingualityType'),
        ),
        migrations.AddField(
            model_name='linguality',
            name='lingualityVariant',
            field=models.ManyToManyField(blank=True, to='collection.LingualityVariant'),
        ),
        migrations.AddField(
            model_name='linguality',
            name='multilingualityType',
            field=models.ManyToManyField(blank=True, to='collection.MultilingualityType'),
        ),
        migrations.AddField(
            model_name='domain',
            name='name',
            field=models.ManyToManyField(blank=True, to='collection.DomainDescription'),
        ),
        migrations.AddField(
            model_name='documentation',
            name='documentationType',
            field=models.ManyToManyField(blank=True, to='collection.DocumentationType'),
        ),
        migrations.AddField(
            model_name='documentation',
            name='fileName',
            field=models.ManyToManyField(blank=True, to='collection.DocumentationFile'),
        ),
        migrations.AddField(
            model_name='documentation',
            name='language',
            field=models.ManyToManyField(to='collection.Language'),
        ),
        migrations.AddField(
            model_name='documentation',
            name='url',
            field=models.ManyToManyField(blank=True, to='collection.DocumentationUrl'),
        ),
        migrations.AddField(
            model_name='collection',
            name='documentation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.Documentation'),
        ),
        migrations.AddField(
            model_name='collection',
            name='domain',
            field=models.ManyToManyField(blank=True, to='collection.Domain'),
        ),
        migrations.AddField(
            model_name='collection',
            name='genre',
            field=models.ManyToManyField(blank=True, to='collection.Genre'),
        ),
        migrations.AddField(
            model_name='collection',
            name='language',
            field=models.ManyToManyField(to='collection.Language'),
        ),
        migrations.AddField(
            model_name='collection',
            name='languageDisorder',
            field=models.ManyToManyField(blank=True, to='collection.LanguageDisorder'),
        ),
        migrations.AddField(
            model_name='collection',
            name='linguality',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.Linguality'),
        ),
        migrations.AddField(
            model_name='collection',
            name='owner',
            field=models.ManyToManyField(blank=True, to='collection.Owner'),
        ),
        migrations.AddField(
            model_name='collection',
            name='pid',
            field=models.ManyToManyField(blank=True, to='collection.PID'),
        ),
        migrations.AddField(
            model_name='collection',
            name='project',
            field=models.ManyToManyField(blank=True, to='collection.Project'),
        ),
        migrations.AddField(
            model_name='collection',
            name='provenance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.Provenance'),
        ),
        migrations.AddField(
            model_name='collection',
            name='relation',
            field=models.ManyToManyField(blank=True, to='collection.Relation'),
        ),
        migrations.AddField(
            model_name='collection',
            name='resource',
            field=models.ManyToManyField(to='collection.Resource'),
        ),
        migrations.AddField(
            model_name='collection',
            name='resourceCreator',
            field=models.ManyToManyField(blank=True, to='collection.ResourceCreator'),
        ),
        migrations.AddField(
            model_name='collection',
            name='speechCorpus',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.SpeechCorpus'),
        ),
        migrations.AddField(
            model_name='collection',
            name='title',
            field=models.ManyToManyField(to='collection.Title'),
        ),
        migrations.AddField(
            model_name='collection',
            name='totalSize',
            field=models.ManyToManyField(blank=True, to='collection.TotalSize'),
        ),
        migrations.AddField(
            model_name='collection',
            name='validation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.Validation'),
        ),
        migrations.AddField(
            model_name='collection',
            name='writtenCorpus',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.WrittenCorpus'),
        ),
        migrations.AddField(
            model_name='access',
            name='availability',
            field=models.ManyToManyField(blank=True, to='collection.AccessAvailability'),
        ),
        migrations.AddField(
            model_name='access',
            name='contact',
            field=models.ManyToManyField(blank=True, to='collection.AccessContact'),
        ),
        migrations.AddField(
            model_name='access',
            name='licenseName',
            field=models.ManyToManyField(blank=True, to='collection.LicenseName'),
        ),
        migrations.AddField(
            model_name='access',
            name='licenseUrl',
            field=models.ManyToManyField(blank=True, to='collection.LicenseUrl'),
        ),
        migrations.AddField(
            model_name='access',
            name='medium',
            field=models.ManyToManyField(blank=True, to='collection.AccessMedium'),
        ),
        migrations.AddField(
            model_name='access',
            name='nonCommercialUsageOnly',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='collection.NonCommercialUsageOnly'),
        ),
        migrations.AddField(
            model_name='access',
            name='website',
            field=models.ManyToManyField(blank=True, to='collection.AccessWebsite'),
        ),
    ]
